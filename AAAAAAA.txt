import pandas as pd
import os
from openpyxl import load_workbook
from openpyxl.utils.dataframe import dataframe_to_rows
from glob import glob

# Paths
template_folder = "Templates"
master_template = "master_template.xlsm"
output_file = "updated_master_template.xlsm"
mapping_file = "mapping_file.xlsx"
output_mapping_file = "updated_mapping_file.xlsx"
unmatched_output_file = "unmatched_records.xlsx"

# Target sheets
sheets = {
    "Account Holder": {"skiprows": 8},
    "Controlling Person": {"skiprows": 8}
}

# Store merged data per sheet
merged_data = {sheet: [] for sheet in sheets}

# Gather all template files
files = glob(os.path.join(template_folder, "*.xlsm"))

print("üì• Reading template files...")
for file in files:
    print(f"‚Üí Processing: {os.path.basename(file)}")

    for sheet_name, opts in sheets.items():
        try:
            df = pd.read_excel(file, sheet_name=sheet_name, skiprows=opts["skiprows"], header=None, engine="openpyxl")

            if df.empty:
                print(f"‚ö†Ô∏è Skipping '{sheet_name}' in {os.path.basename(file)} ‚Äî no data found after row 8.")
                continue

            headers = pd.read_excel(file, sheet_name=sheet_name, skiprows=3, nrows=1, engine="openpyxl").columns.tolist()

            if len(headers) != df.shape[1]:
                print(f"‚ö†Ô∏è Skipping '{sheet_name}' in {os.path.basename(file)} ‚Äî column count mismatch.")
                continue

            df.columns = headers
            merged_data[sheet_name].append(df)

        except Exception as e:
            print(f"‚ùå Error reading '{sheet_name}' in {os.path.basename(file)}: {e}")

# Load master template (preserve macros)
print("‚úçÔ∏è Loading master template...")
wb = load_workbook(master_template, keep_vba=True)

# Write merged data into each sheet
for sheet_name in sheets:
    if sheet_name not in wb.sheetnames:
        print(f"‚ùå Sheet '{sheet_name}' not found in master template. Skipping.")
        continue

    if not merged_data[sheet_name]:
        print(f"‚ÑπÔ∏è No data collected for '{sheet_name}'. Skipping.")
        continue

    ws = wb[sheet_name]
    start_row = 9  # Data begins after header

    full_df = pd.concat(merged_data[sheet_name], ignore_index=True)

    print(f"‚úçÔ∏è Writing {len(full_df)} rows to '{sheet_name}'...")
    for r_idx, row in enumerate(dataframe_to_rows(full_df, index=False, header=False), start=start_row):
        for c_idx, value in enumerate(row, start=1):
            ws.cell(row=r_idx, column=c_idx, value=value)

# Save updated master file
wb.save(output_file)
print(f"‚úÖ Master template saved as '{output_file}'")

# -------- Mapping Check --------
print("\nüîç Checking mapping file...")

# Read master file Account Holder sheet (header row 4, data from row 9)
master_df = pd.read_excel(output_file, sheet_name="Account Holder", skiprows=8, header=None, engine="openpyxl")
master_headers = pd.read_excel(output_file, sheet_name="Account Holder", skiprows=3, nrows=1, engine="openpyxl").columns.tolist()
master_df.columns = master_headers

# Read mapping file (same structure: header at row 4, data from row 9)
mapping_df = pd.read_excel(mapping_file, skiprows=8, header=None, engine="openpyxl")
mapping_headers = pd.read_excel(mapping_file, skiprows=3, nrows=1, engine="openpyxl").columns.tolist()

if len(mapping_headers) != mapping_df.shape[1]:
    raise Exception("‚ùå Mapping file column count mismatch between header and data.")

mapping_df.columns = mapping_headers

# Ensure required columns exist
required_columns = ["Account Number", "Customer ID"]
if not all(col in master_df.columns for col in required_columns):
    raise Exception("‚ùå 'Account Number' and 'Customer ID' must exist in master file.")
if not all(col in mapping_df.columns for col in required_columns):
    raise Exception("‚ùå 'Account Number' and 'Customer ID' must exist in mapping file.")

# Compare and mark Status
master_keys = set(zip(master_df["Account Number"], master_df["Customer ID"]))
mapping_df["Status"] = mapping_df.apply(
    lambda row: (row["Account Number"], row["Customer ID"]) in master_keys, axis=1
)

# Export updated mapping file
mapping_df.to_excel(output_mapping_file, index=False)
print(f"‚úÖ Mapping file updated with 'Status' column ‚Üí {output_mapping_file}")

# Export unmatched records
unmatched_df = mapping_df[~mapping_df["Status"]]
if not unmatched_df.empty:
    unmatched_df.to_excel(unmatched_output_file, index=False)
    print(f"üì§ Unmatched records saved to ‚Üí {unmatched_output_file}")
else:
    print("‚úÖ All mapping records matched. No unmatched records to save.")
