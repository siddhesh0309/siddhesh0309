import json
import base64
from oscrypto import asymmetric
from asn1crypto import cms, pem

def sign_request(payload_dict, key_path='unencrypted_key.pem', cert_path='cert.pem'):
    # Serialize payload
    data = json.dumps(payload_dict, separators=(',', ':')).encode('utf-8')

    # Load key
    with open(key_path, 'rb') as f:
        key_bytes = f.read()
        if pem.detect(key_bytes):
            _, _, key_bytes = pem.unarmor(key_bytes)
        private_key = asymmetric.load_private_key(key_bytes)

    # Load certificate
    with open(cert_path, 'rb') as f:
        cert_bytes = f.read()
        if pem.detect(cert_bytes):
            _, _, cert_bytes = pem.unarmor(cert_bytes)
        cert = asymmetric.load_certificate(cert_bytes)

    # Sign
    signature = asymmetric.sign(
        private_key,
        data,
        hash_algorithm='sha1',
        padding='pkcs1',
        algorithm='rsassa_pkcs1v15'
    )

    # Build CMS signature
    signed_data = cms.SignedData({
        'version': 'v1',
        'digest_algorithms': [cms.DigestAlgorithm({'algorithm': 'sha1'})],
        'encap_content_info': {
            'content_type': 'data',
            'content': None
        },
        'certificates': [cert.asn1],
        'signer_infos': [
            cms.SignerInfo({
                'version': 'v1',
                'sid': cms.SignerIdentifier({
                    'issuer_and_serial_number': cms.IssuerAndSerialNumber({
                        'issuer': cert.asn1.issuer,
                        'serial_number': cert.asn1.serial_number
                    })
                }),
                'digest_algorithm': {'algorithm': 'sha1'},
                'signature_algorithm': {'algorithm': 'rsassa_pkcs1v15'},
                'signature': signature
            })
        ]
    })

    content_info = cms.ContentInfo({
        'content_type': 'signed_data',
        'content': signed_data
    })

    return base64.b64encode(content_info.dump()).decode('utf-8')
