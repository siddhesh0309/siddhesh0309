# Required imports
import pandas as pd
from pathlib import Path
from openpyxl import load_workbook
from openpyxl.utils.dataframe import dataframe_to_rows
import datetime
import xmltodict
import zipfile
import warnings
import os
import fnmatch as fmatch
import re

# Disable warnings
warnings.simplefilter(action='ignore', category=UserWarning)
warnings.simplefilter(action='ignore', category=FutureWarning)

# Base path
base_path = ""

def create_output_folder(base_path):
    output_folder = os.path.join(base_path, "output")
    os.makedirs(output_folder, exist_ok=True)
    return output_folder

output_folder = create_output_folder(base_path)

def find_file(filename_pattern, basedir=base_path):
    latest_file = None
    latest_time = 0
    for user_folder in os.listdir(basedir):
        user_path = os.path.join(basedir, user_folder, 'Input')
        if os.path.isdir(user_path):
            for dirpath, _, filenames in os.walk(user_path):
                for fn in fmatch.filter(filenames, filename_pattern):
                    path = os.path.join(dirpath, fn)
                    mtime = os.path.getmtime(path)
                    if mtime > latest_time:
                        latest_time = mtime
                        latest_file = path
    return latest_file

def extract_and_convert_vfin(zip_path):
    with zipfile.ZipFile(zip_path, 'r') as z:
        xml_name = z.namelist()[0]
        z.extract(xml_name, path=output_folder)
    data = xmltodict.parse(open(os.path.join(output_folder, xml_name), 'rb'))
    rows = data['Workbook']['Worksheet']['Table']['Row']
    df = pd.DataFrame([[c.get('Data', {}).get('#text', '') for c in row.get('Cell', [])] for row in rows])
    df.columns = df.iloc[0]
    df = df.drop(0).reset_index(drop=True)
    for col in ['Bill amount', 'Bill amount outstanding', 'Lcy Ledger Balance', 'COF/VOF RATE', 'DR Interest Rate Spread']:
        if col in df.columns:
            df[col] = pd.to_numeric(df[col], errors='coerce')
    df[['Bill amount', 'Bill amount outstanding', 'Lcy Ledger Balance']] = df[
        ['Bill amount', 'Bill amount outstanding', 'Lcy Ledger Balance']
    ].fillna(0).round(0).astype('Int64')
    return df

# Customer normalization mapping
customer_group_map = {
    "arcelormittal nippon stl ipl": "arcelormittal",
    "badshah": "badshah",
    "morde foods": "morde foods",
    "tata electronics private": "tata electronics private",
    "technocraft industries (india) ltd": "technocraft"
}

# Start script
print("\n-- Generating Customer Files --")

# Read VFIN, BUYFp, and normalize customer names
vfin_df = extract_and_convert_vfin(find_file("VFIN*"))
buyfp_df = pd.read_excel(find_file("IP@BUYFp*"))
buyfp_df['BUSYDT'] = pd.to_datetime(buyfp_df['BUSYDT'], errors='coerce')
vfin_df['Date approved'] = pd.to_datetime(vfin_df['Date approved'], errors='coerce')
buyfp_df['Customer Normalized'] = buyfp_df['BUCUNM'].str.strip().str.lower().map(customer_group_map).fillna(
    buyfp_df['BUCUNM'].str.strip().str.lower())

VFDate = find_file("VFIN*")
folder_name = Path(VFDate).stem
date_match = re.search(r'VFIN_(\d{2}[A-Za-z]{3}\d{4})', folder_name)
if date_match:
    date_for_append = date_match.group(1)
else:
    raise ValueError("Cannot extract date from folder name")

root_output = Path(output_folder) / "Customer_Excels"
root_output.mkdir(exist_ok=True)

# Process each customer
for customer in buyfp_df['Customer Normalized'].dropna().unique():
    cust_buyfp = buyfp_df[buyfp_df['Customer Normalized'] == customer].copy()
    cust_vfin = vfin_df[
        vfin_df['Drawee name and address line 1'].str.lower().str.contains(customer)
    ].copy() if customer in customer_group_map.values() else vfin_df[
        vfin_df['Drawee name and address line 1'].str.strip().str.lower() == customer
    ].copy()

    # BUYFp Enrichment by row
    enriched_buyfp_rows = []
    for _, row in cust_buyfp.iterrows():
        if pd.isna(row['BUSYDT']):
            continue
        sheet_name = row['BUSYDT'].strftime('%b-%Y')
        config_monthly = pd.read_excel(find_file("customer_config*"), sheet_name=sheet_name)
        config_monthly['Customer Normalized'] = config_monthly['Customer Name'].str.strip().str.lower().map(customer_group_map).fillna(config_monthly['Customer Name'].str.strip().str.lower())
        cfg = config_monthly[config_monthly['Customer Normalized'] == customer]
        if cfg.empty:
            print(f"Skipping BUYFP row for {customer} on {row['BUSYDT'].date()} — no config in {sheet_name}")
            continue
        tbill, spread, tenor = cfg.iloc[0][['Tbill Rate', 'Spread', 'Tenor']]
        rate = tbill + spread
        interest = round(row['BUCOAMT'] * rate * tenor / 36500, 2)
        row['TBill Rate'] = tbill
        row['Spread'] = spread
        row['Tenor'] = tenor
        row['Rate'] = rate
        row['Interest Amount'] = interest
        enriched_buyfp_rows.append(row)

    cust_buyfp = pd.DataFrame(enriched_buyfp_rows)

    # VFIN Enrichment by row
    enriched_vfin_rows = []
    for _, row in cust_vfin.iterrows():
        if pd.isna(row['Date approved']):
            continue
        sheet_name = row['Date approved'].strftime('%b-%Y')
        config_monthly = pd.read_excel(find_file("customer_config*"), sheet_name=sheet_name)
        config_monthly['Customer Normalized'] = config_monthly['Customer Name'].str.strip().str.lower().map(customer_group_map).fillna(config_monthly['Customer Name'].str.strip().str.lower())
        cfg = config_monthly[config_monthly['Customer Normalized'] == customer]
        if cfg.empty:
            print(f"Skipping VFIN row for {customer} on {row['Date approved'].date()} — no config in {sheet_name}")
            continue
        roi = cfg.iloc[0]['Roi']
        principal = row.get('Bill amount', 0)
        interest = round(principal * roi / 36500, 2)
        row['RoI'] = roi
        row['Interest Amount'] = interest
        enriched_vfin_rows.append(row)

    cust_vfin = pd.DataFrame(enriched_vfin_rows)

    # Write to master file
    customer_dir = root_output / customer
    customer_dir.mkdir(exist_ok=True)
    master_path = customer_dir / f"{customer}_Master.xlsx"
    with pd.ExcelWriter(master_path, engine='openpyxl', mode='w') as writer:
        cust_vfin.to_excel(writer, sheet_name='vfin', index=False)
        cust_buyfp.to_excel(writer, sheet_name='buyfp', index=False)
    wb = load_workbook(master_path)
    ws_v = wb["vfin"]
    ws_b = wb["buyfp"]
    ws_v.insert_rows(1)
    ws_v.cell(row=1, column=1, value=date_for_append)
    wb.save(master_path)

    # Monthly file handling
    all_dates = pd.concat([cust_vfin['Date approved'], cust_buyfp['BUSYDT']]).dropna()
    for period in all_dates.dt.to_period("M").unique():
        s = period.to_timestamp()
        e = s + pd.offsets.MonthEnd(0)
        vmon = cust_vfin[(cust_vfin['Date approved'] >= s) & (cust_vfin['Date approved'] <= e)]
        bmon = cust_buyfp[(cust_buyfp['BUSYDT'] >= s) & (cust_buyfp['BUSYDT'] <= e)]
        ystr = s.strftime('%Y')
        mstr = s.strftime('%b')
        mdir = customer_dir / ystr / mstr
        mdir.mkdir(parents=True, exist_ok=True)
        fp = mdir / f"{customer}_{mstr}.xlsx"
        with pd.ExcelWriter(fp, engine="openpyxl", mode='w') as writer:
            vmon.to_excel(writer, sheet_name="vfin", index=False)
            bmon.to_excel(writer, sheet_name="buyfp", index=False)
        wb2 = load_workbook(fp)
        ws2 = wb2["vfin"]
        ws2.insert_rows(1)
        ws2.cell(row=1, column=1, value=date_for_append)
        wb2.save(fp)

# Clean XML
xmlfile = Path(output_folder) / 'VFIN.xml'
if xmlfile.exists():
    xmlfile.unlink()
print("\n✅ Generated Customer Files Successfully.")
