# (IMPORTS SAME AS BEFORE)
# ... all your imports and function definitions (create_output_folder, find_file, extract_and_convert_vfin) ...

# Start script
print("\n-- Generating Customer Files --")

vfin_df = extract_and_convert_vfin(find_file("VFIN*"))
buyfp_df = pd.read_excel(find_file("IP@BUYFp*"))
buyfp_df['BUSYDT'] = pd.to_datetime(buyfp_df['BUSYDT'], errors='coerce')
vfin_df['Date approved'] = pd.to_datetime(vfin_df['Date approved'], errors='coerce')
buyfp_df['Customer Normalized'] = buyfp_df['BUCUNM'].str.strip().str.lower().map(customer_group_map).fillna(
    buyfp_df['BUCUNM'].str.strip().str.lower())

VFDate = find_file("VFIN*")
folder_name = Path(VFDate).stem
date_match = re.search(r'VFIN_(\d{2}[A-Za-z]{3}\d{4})', folder_name)
if date_match:
    date_for_append = date_match.group(1)
else:
    raise ValueError("Cannot extract date from folder name")

root_output = Path(output_folder) / "Customer_Excels"
root_output.mkdir(exist_ok=True)

for customer in buyfp_df['Customer Normalized'].dropna().unique():
    cust_buyfp = buyfp_df[buyfp_df['Customer Normalized'] == customer].copy()
    cust_vfin = vfin_df[vfin_df['Drawee name and address line 1'].str.lower().str.contains(customer)].copy()

    enriched_buyfp_rows = []
    for _, row in cust_buyfp.iterrows():
        if pd.isna(row['BUSYDT']):
            continue
        sheet_name = row['BUSYDT'].strftime('%b-%Y')
        config_monthly = pd.read_excel(find_file("customer_config*"), sheet_name=sheet_name)
        config_monthly['Customer Normalized'] = config_monthly['Customer Name'].str.strip().str.lower().map(customer_group_map).fillna(config_monthly['Customer Name'].str.strip().str.lower())
        cfg = config_monthly[config_monthly['Customer Normalized'] == customer]
        if cfg.empty:
            print(f"Skipping BUYFP row for {customer} on {row['BUSYDT'].date()} — no config in {sheet_name}")
            continue
        tbill, spread, tenor = cfg.iloc[0][['Tbill Rate', 'Spread', 'Tenor']]
        rate = tbill + spread
        interest = round(row['BUCOAMT'] * rate * tenor / 36500, 2)
        row['TBill Rate'] = tbill
        row['Spread'] = spread
        row['Tenor'] = tenor
        row['Rate'] = rate
        row['Interest Amount'] = interest
        enriched_buyfp_rows.append(row)

    cust_buyfp = pd.DataFrame(enriched_buyfp_rows)

    enriched_vfin_rows = []
    for _, row in cust_vfin.iterrows():
        if pd.isna(row['Date approved']):
            continue
        sheet_name = row['Date approved'].strftime('%b-%Y')
        config_monthly = pd.read_excel(find_file("customer_config*"), sheet_name=sheet_name)
        config_monthly['Customer Normalized'] = config_monthly['Customer Name'].str.strip().str.lower().map(customer_group_map).fillna(config_monthly['Customer Name'].str.strip().str.lower())
        cfg = config_monthly[config_monthly['Customer Normalized'] == customer]
        if cfg.empty:
            print(f"Skipping VFIN row for {customer} on {row['Date approved'].date()} — no config in {sheet_name}")
            continue
        roi = cfg.iloc[0]['Roi']
        principal = row.get('Bill amount', 0)
        interest = round(principal * roi / 36500, 2)
        row['RoI'] = roi
        row['Interest Amount'] = interest
        enriched_vfin_rows.append(row)

    cust_vfin = pd.DataFrame(enriched_vfin_rows)

    customer_dir = root_output / customer
    customer_dir.mkdir(exist_ok=True)
    master_path = customer_dir / f"{customer}_Master.xlsx"

    if not master_path.exists():
        with pd.ExcelWriter(master_path, engine='openpyxl') as writer:
            cust_vfin.to_excel(writer, sheet_name='vfin', index=False)
            cust_buyfp.to_excel(writer, sheet_name='buyfp', index=False)
        wb = load_workbook(master_path)
        ws_v = wb["vfin"]
        ws_v.insert_rows(1)
        ws_v.cell(row=1, column=1, value=date_for_append)
        wb.save(master_path)
    else:
        wb = load_workbook(master_path)

        # Append to vfin
        if 'vfin' in wb.sheetnames:
            ws_v = wb['vfin']
            ws_v.append([date_for_append])
            for row in dataframe_to_rows(cust_vfin, index=False, header=False):
                ws_v.append(row)
        else:
            with pd.ExcelWriter(master_path, engine="openpyxl", mode='a', if_sheet_exists='overlay') as writer:
                cust_vfin.to_excel(writer, sheet_name='vfin', index=False)

        # Overwrite buyfp
        if 'buyfp' in wb.sheetnames:
            wb.remove(wb['buyfp'])
        wb.save(master_path)

        with pd.ExcelWriter(master_path, engine="openpyxl", mode='a', if_sheet_exists='overlay') as writer:
            cust_buyfp.to_excel(writer, sheet_name="buyfp", index=False)

    # --- Monthly file handling ---
    all_dates = pd.concat([cust_vfin['Date approved'], cust_buyfp['BUSYDT']]).dropna()
    for period in all_dates.dt.to_period("M").unique():
        s = period.to_timestamp()
        e = s + pd.offsets.MonthEnd(0)
        vmon = cust_vfin[(cust_vfin['Date approved'] >= s) & (cust_vfin['Date approved'] <= e)]
        bmon = cust_buyfp[(cust_buyfp['BUSYDT'] >= s) & (cust_buyfp['BUSYDT'] <= e)]
        ystr = s.strftime('%Y')
        mstr = s.strftime('%b')
        mdir = customer_dir / ystr / mstr
        mdir.mkdir(parents=True, exist_ok=True)
        fp = mdir / f"{customer}_{mstr}.xlsx"

        if not fp.exists():
            with pd.ExcelWriter(fp, engine="openpyxl") as writer:
                vmon.to_excel(writer, sheet_name="vfin", index=False)
                bmon.to_excel(writer, sheet_name="buyfp", index=False)
            wb2 = load_workbook(fp)
            ws2 = wb2["vfin"]
            ws2.insert_rows(1)
            ws2.cell(row=1, column=1, value=date_for_append)
            wb2.save(fp)
        else:
            wb2 = load_workbook(fp)

            # Append to vfin
            if 'vfin' in wb2.sheetnames:
                ws_v = wb2['vfin']
                ws_v.append([date_for_append])
                for row in dataframe_to_rows(vmon, index=False, header=False):
                    ws_v.append(row)
            else:
                with pd.ExcelWriter(fp, engine="openpyxl", mode='a', if_sheet_exists='overlay') as writer:
                    vmon.to_excel(writer, sheet_name="vfin", index=False)

            # Overwrite buyfp
            if 'buyfp' in wb2.sheetnames:
                wb2.remove(wb2['buyfp'])
            wb2.save(fp)

            with pd.ExcelWriter(fp, engine="openpyxl", mode='a', if_sheet_exists='overlay') as writer:
                bmon.to_excel(writer, sheet_name="buyfp", index=False)

# Cleanup
xmlfile = Path(output_folder) / 'VFIN.xml'
if xmlfile.exists():
    xmlfile.unlink()

print("\n✅ Generated Customer Files Successfully.")
