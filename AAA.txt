import pandas as pd
from pathlib import Path
from openpyxl import load_workbook
from openpyxl.utils.dataframe import dataframe_to_rows
import datetime

# --- Load inputs ---
vfin_df = pd.read_excel("Vfin.xlsx")
buyfp_df = pd.read_excel("buyfp.xlsx")
config_path = "Customer Config.xlsx"

vfin_df['Date'] = pd.to_datetime(vfin_df['Date'])
buyfp_df['Date'] = pd.to_datetime(buyfp_df['Date'])

output_dir = Path("Customer_Excels")
output_dir.mkdir(exist_ok=True)

# Helper: get config for a customer from correct sheet
def get_customer_config(customer, date):
    month_sheet = date.strftime("%b-%Y")  # Ex: Dec-2024
    try:
        sheet_df = pd.read_excel(config_path, sheet_name=month_sheet)
        row = sheet_df[sheet_df['Customer'].str.lower() == customer.lower()]
        if not row.empty:
            return row.iloc[0].to_dict()
    except Exception:
        pass
    return None

# For each customer
for customer in buyfp_df['Customer Name'].dropna().unique():
    cust_vfin = vfin_df[vfin_df['Customer Name'] == customer].copy()
    cust_buyfp = buyfp_df[buyfp_df['Customer Name'] == customer].copy()

    # Inject config values
    for idx, row in cust_buyfp.iterrows():
        config = get_customer_config(customer, row['Date'])
        if config:
            cust_buyfp.at[idx, 'TBill Rate'] = config.get('TBill Rate')
            cust_buyfp.at[idx, 'Spread'] = config.get('Spread')
            cust_buyfp.at[idx, 'Tenor'] = config.get('Tenor')

    for idx, row in cust_vfin.iterrows():
        config = get_customer_config(customer, row['Date'])
        if config:
            roi = config.get('ROI')
            tenor = config.get('Tenor')
            amount = row.get('Amount')
            # Add ROI and Interest
            cust_vfin.at[idx, 'ROI'] = roi
            if pd.notnull(amount) and pd.notnull(roi) and pd.notnull(tenor):
                interest = round((amount * roi * tenor) / 36500, 2)
                cust_vfin.at[idx, 'Interest Amount'] = interest

    # Create / overwrite Master
    with pd.ExcelWriter(output_dir / f"{customer}_Master.xlsx", engine="openpyxl", mode='w') as writer:
        cust_vfin.to_excel(writer, index=False, sheet_name="vfin")
        cust_buyfp.to_excel(writer, index=False, sheet_name="buyfp")

    # --- Month-wise Processing ---
    all_dates = pd.concat([cust_vfin['Date'], cust_buyfp['Date']]).dropna().dt.to_period("M").unique()
    for period in all_dates:
        month_start = period.to_timestamp()
        month_end = month_start + pd.offsets.MonthEnd(0)

        vfin_month = cust_vfin[(cust_vfin['Date'] >= month_start) & (cust_vfin['Date'] <= month_end)]
        buyfp_month = cust_buyfp[(cust_buyfp['Date'] >= month_start) & (cust_buyfp['Date'] <= month_end)]

        file_path = output_dir / f"{customer}_{period}.xlsx"

        if not file_path.exists():
            # Create fresh file
            with pd.ExcelWriter(file_path, engine='openpyxl') as writer:
                vfin_month.to_excel(writer, sheet_name="vfin", index=False)
                buyfp_month.to_excel(writer, sheet_name="buyfp", index=False)
        else:
            wb = load_workbook(file_path)
            writer = pd.ExcelWriter(file_path, engine='openpyxl', mode='a', if_sheet_exists='overlay')
            writer.book = wb

            # Append vfin
            if 'vfin' in wb.sheetnames:
                sheet = wb['vfin']
                sheet.append([])  # blank row
                for r in dataframe_to_rows(vfin_month, index=False, header=False):
                    sheet.append(r)
            else:
                vfin_month.to_excel(writer, sheet_name="vfin", index=False)

            # Overwrite buyfp
            if 'buyfp' in wb.sheetnames:
                wb.remove(wb['buyfp'])
            buyfp_month.to_excel(writer, sheet_name="buyfp", index=False)

            writer.save()
            writer.close()

print("âœ… Process complete.")
