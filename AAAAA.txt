import pandas as pd
import os
import shutil
import subprocess
from tqdm import tqdm

# === CONFIGURATION ===
res_file = 'res.xlsb'
nonres_file = 'non res.xlsb'
certificate_folder = 'certificate'
temp_folder = 'temp_to_copy'
output_folder = 'rbwm'

# === COLUMN MAPPINGS ===
res_columns = {
    'Pan deductee(514)': 'pan',
    'Pan deductee name(514)': 'pan_name',
    'Deductee code (514)': 'deductee_code',
    'Email': 'email',
    'Customer id': 'customer_id',
    'Ebn': 'ebn'
}

nonres_columns = {
    'Pan deductee(517)': 'pan',
    'Pan deductee name(517)': 'pan_name',
    'Decutee code(517)': 'deductee_code',
    'Email': 'email',
    'Customer id': 'customer_id',
    'Ebn': 'ebn'
}

# === READ .XLSB FUNCTION ===
def read_filtered_xlsb(file_path, col_map):
    cols = list(col_map.keys())
    df = pd.read_excel(file_path, engine='pyxlsb', usecols=cols)
    df = df.rename(columns=col_map)
    return df

# === LOAD AND MERGE DATA ===
print("📥 Reading files...")
res_df = read_filtered_xlsb(res_file, res_columns)
nonres_df = read_filtered_xlsb(nonres_file, nonres_columns)
combined_df = pd.concat([res_df, nonres_df], ignore_index=True)

# === CLEAN AND FILTER PAN DATA ===
combined_df['pan'] = combined_df['pan'].astype(str).str.strip().str.upper()
valid_pan_df = combined_df[
    ~combined_df['pan'].str.lower().isin(['', 'na', 'nana'])
]
unique_pan_df = valid_pan_df.drop_duplicates(subset='pan').reset_index(drop=True)

# === FILTER REQUIRED ROWS ===
filtered_df = unique_pan_df[
    unique_pan_df['deductee_code'].astype(str).str.strip().str.endswith(('02', '2')) &
    (unique_pan_df['ebn'].astype(str).str.strip().str.upper() == 'N')
]

print(f"✅ Filtered PANs: {len(filtered_df)}")

# === MATCH EXISTING FILES ===
available_files = set(os.listdir(certificate_folder))
matched_files = []
for pan in filtered_df['pan'].unique():
    filename = f"{pan}_Q4.pdf"
    if filename in available_files:
        matched_files.append(filename)

total_files = len(matched_files)
print(f"📦 Files to prepare for robocopy: {total_files}")

# === COPY TO TEMP FOLDER ===
os.makedirs(temp_folder, exist_ok=True)

with tqdm(total=total_files, desc="Copying PDFs to temp", unit="file") as pbar:
    for filename in matched_files:
        src = os.path.join(certificate_folder, filename)
        dst = os.path.join(temp_folder, filename)
        shutil.copy2(src, dst)
        pbar.update(1)

# === ROBUST ROBOCOPY ===
os.makedirs(output_folder, exist_ok=True)

print("🚀 Starting robocopy transfer...")
robocopy_cmd = [
    "robocopy",
    temp_folder,
    output_folder,
    "/MOV",
    "/E",            # Include subdirs (in case temp folder has them)
    "/Z",            # Restartable
    "/MT:32",        # 32 threads
    "/R:1",          # Retry 1 time
    "/W:1",          # Wait 1 sec
    "/COPY:D",       # Copy only data (not timestamps/ACLs)
    "/NDL", "/NFL", "/NP"  # Suppress logging
]

# Run robocopy
result = subprocess.run(" ".join(robocopy_cmd), shell=True)

# Final result
if result.returncode < 8:
    print("✅ Robocopy completed successfully.")
else:
    print("⚠️ Robocopy completed with errors. Check the result code:", result.returncode)
